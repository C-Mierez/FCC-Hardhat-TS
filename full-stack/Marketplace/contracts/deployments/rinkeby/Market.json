{
  "address": "0xb689A6670c17d31ce42fd0b370fB009873eeb789",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "AlreadyListed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "InvalidAmountPayed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoProceedsToClaim",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NotApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughContractBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NotListed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroValue",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC721",
          "name": "nft",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "BoughtItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ClaimedProceeds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC721",
          "name": "nft",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "ListedItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC721",
          "name": "nft",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "UpdatedItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC721",
          "name": "nft",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "WithdrawnItem",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "buyItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimProceeds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getListing",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "internalType": "struct IMarket.Listing",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_seller",
          "type": "address"
        }
      ],
      "name": "getOwedProceeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "listItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newPrice",
          "type": "uint256"
        }
      ],
      "name": "updateItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "withdrawItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbc80732963cecce91c3d706cc4bc5cfc5fdc34d8ddc3d7de7acf1064a0d017f2",
  "receipt": {
    "to": null,
    "from": "0xcc152e08f27C284ad49e39F8D98e608dE721bfDE",
    "contractAddress": "0xb689A6670c17d31ce42fd0b370fB009873eeb789",
    "transactionIndex": 4,
    "gasUsed": "1381031",
    "logsBloom": "0x
    "blockHash": "0x7b8d96471765d4e2905cffb6f9afac02e04063ad754e58e8d323dbb28d2851a9",
    "transactionHash": "0xbc80732963cecce91c3d706cc4bc5cfc5fdc34d8ddc3d7de7acf1064a0d017f2",
    "logs": [],
    "blockNumber": 10938149,
    "cumulativeGasUsed": "3107408",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "03e5feb8ca83b766ef4c3d0be9308340",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AlreadyListed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"InvalidAmountPayed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoProceedsToClaim\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NotApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughContractBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NotListed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC721\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"BoughtItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedProceeds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC721\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ListedItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC721\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"UpdatedItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC721\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"WithdrawnItem\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimProceeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getListing\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct IMarket.Listing\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"getOwedProceeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"listItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"updateItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"buyItem(address,uint256)\":{\"details\":\"The buyer is charged the price of the item.\",\"params\":{\"nft\":\"Address of the NFT contract.\",\"tokenId\":\"NFT token ID.\"}},\"listItem(address,uint256,uint256)\":{\"details\":\"The submitted NFT is approved for the contract to transfer it when the listing is confirmed.\",\"params\":{\"nft\":\"Address of the NFT contract.\",\"price\":\"Price of the item.\",\"tokenId\":\"NFT token ID.\"}},\"updateItem(address,uint256,uint256)\":{\"params\":{\"newPrice\":\"New price of the item.\",\"nft\":\"Address of the NFT contract.\",\"tokenId\":\"NFT token ID.\"}},\"withdrawItem(address,uint256)\":{\"params\":{\"nft\":\"Address of the NFT contract.\",\"tokenId\":\"NFT token ID.\"}}},\"stateVariables\":{\"s_listings\":{\"details\":\"Listing information for each nft token NFT Address -> TokenId -> Listing\"},\"s_owedProceeds\":{\"details\":\"Store the cumulative amount of ETH owed to each seller Seller Address -> Amount of ETH owed\"}},\"version\":1},\"userdoc\":{\"errors\":{\"NotEnoughBalance()\":[{\"notice\":\"Emitted when the address does not have enough balance\"}],\"ZeroAddress()\":[{\"notice\":\"Emitted when the submitted address is the zero address\"}],\"ZeroValue()\":[{\"notice\":\"Emitted when the submitted value is zero.\"}]},\"kind\":\"user\",\"methods\":{\"buyItem(address,uint256)\":{\"notice\":\"Buys a listed item on the marketplace.\"},\"listItem(address,uint256,uint256)\":{\"notice\":\"Lists an item on the marketplace.\"},\"withdrawItem(address,uint256)\":{\"notice\":\"Cancels a listing on the marketplace.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Market.sol\":\"Market\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Market.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./interfaces/IMarket.sol\\\";\\r\\nimport \\\"./abstract/Base.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\ncontract Market is IMarket, ReentrancyGuard, Base {\\r\\n    /// @dev Listing information for each nft token\\r\\n    /// NFT Address -> TokenId -> Listing\\r\\n    mapping(IERC721 => mapping(uint256 => Listing)) internal s_listings;\\r\\n\\r\\n    /// @dev Store the cumulative amount of ETH owed to each seller\\r\\n    /// Seller Address -> Amount of ETH owed\\r\\n    mapping(address => uint256) internal s_owedProceeds;\\r\\n\\r\\n    /* -------------------------------- Modifiers ------------------------------- */\\r\\n    /// @dev Checks whether the Market is approved to transfer the NFT.\\r\\n    modifier isApproved(IERC721 _nft, uint256 _tokenId) {\\r\\n        if (_nft.getApproved(_tokenId) != address(this))\\r\\n            revert NotApproved(address(_nft), _tokenId);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isListed(IERC721 _nft, uint256 _tokenId) {\\r\\n        if (s_listings[_nft][_tokenId].price == 0)\\r\\n            revert NotListed(address(_nft), _tokenId);\\r\\n\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isNotListed(IERC721 _nft, uint256 _tokenId) {\\r\\n        if (s_listings[_nft][_tokenId].price > 0)\\r\\n            revert AlreadyListed(address(_nft), _tokenId);\\r\\n\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isOwner(\\r\\n        IERC721 _nft,\\r\\n        uint256 _tokenId,\\r\\n        address _sender\\r\\n    ) {\\r\\n        if (_nft.ownerOf(_tokenId) != _sender)\\r\\n            revert NotOwner(address(_nft), _tokenId);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /* -------------------------------- Functions ------------------------------- */\\r\\n    /// @inheritdoc IMarket\\r\\n    function listItem(\\r\\n        IERC721 _nft,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _price\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n        checkNonZeroAddress(address(_nft))\\r\\n        checkNonZeroValue(_price)\\r\\n        isApproved(_nft, _tokenId)\\r\\n        isNotListed(_nft, _tokenId)\\r\\n        isOwner(_nft, _tokenId, msg.sender)\\r\\n    {\\r\\n        s_listings[_nft][_tokenId] = Listing(msg.sender, _price);\\r\\n\\r\\n        emit ListedItem(msg.sender, _nft, _tokenId, _price);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IMarket\\r\\n    function buyItem(IERC721 _nft, uint256 _tokenId)\\r\\n        external\\r\\n        payable\\r\\n        override\\r\\n        nonReentrant\\r\\n        checkNonZeroAddress(address(_nft))\\r\\n        isListed(_nft, _tokenId)\\r\\n    {\\r\\n        Listing memory listing = s_listings[_nft][_tokenId];\\r\\n        // Check that the correct amount of ETH was paid\\r\\n        if (msg.value != listing.price) revert InvalidAmountPayed(msg.value);\\r\\n\\r\\n        // Clear the listing\\r\\n        delete s_listings[_nft][_tokenId];\\r\\n\\r\\n        // Transfer the NFT to the buyer\\r\\n        _nft.safeTransferFrom(listing.owner, msg.sender, _tokenId);\\r\\n\\r\\n        // Add the amount of ETH owed to the seller\\r\\n        s_owedProceeds[listing.owner] += listing.price;\\r\\n\\r\\n        emit BoughtItem(\\r\\n            msg.sender,\\r\\n            listing.owner,\\r\\n            _nft,\\r\\n            _tokenId,\\r\\n            listing.price\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IMarket\\r\\n    function withdrawItem(IERC721 _nft, uint256 _tokenId)\\r\\n        external\\r\\n        override\\r\\n        checkNonZeroAddress(address(_nft))\\r\\n        isOwner(_nft, _tokenId, msg.sender)\\r\\n        isListed(_nft, _tokenId)\\r\\n    {\\r\\n        // Clear the listing\\r\\n        delete s_listings[_nft][_tokenId];\\r\\n\\r\\n        emit WithdrawnItem(_nft, _tokenId);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IMarket\\r\\n    function updateItem(\\r\\n        IERC721 _nft,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _newPrice\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n        checkNonZeroAddress(address(_nft))\\r\\n        isOwner(_nft, _tokenId, msg.sender)\\r\\n        isListed(_nft, _tokenId)\\r\\n    {\\r\\n        // Update the listing price\\r\\n        s_listings[_nft][_tokenId].price = _newPrice;\\r\\n\\r\\n        emit UpdatedItem(msg.sender, _nft, _tokenId, _newPrice);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IMarket\\r\\n    function claimProceeds() external override nonReentrant {\\r\\n        uint256 proceeds = s_owedProceeds[msg.sender];\\r\\n        // Check that there's something to claim\\r\\n        if (proceeds == 0) revert NoProceedsToClaim();\\r\\n\\r\\n        // Check that the payment can be done. (Critical Failure if not)\\r\\n        if (address(this).balance < proceeds) revert NotEnoughBalance();\\r\\n\\r\\n        s_owedProceeds[msg.sender] = 0;\\r\\n\\r\\n        // Transfer the ETH owed to the sender\\r\\n        (bool success, ) = address(msg.sender).call{value: proceeds}(\\\"\\\");\\r\\n\\r\\n        if (!success) revert TransferFailed();\\r\\n\\r\\n        emit ClaimedProceeds(msg.sender, proceeds);\\r\\n    }\\r\\n\\r\\n    /* ---------------------------------- Views --------------------------------- */\\r\\n    function getListing(IERC721 _nft, uint256 _tokenId)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (Listing memory)\\r\\n    {\\r\\n        return s_listings[_nft][_tokenId];\\r\\n    }\\r\\n\\r\\n    function getOwedProceeds(address _seller)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return s_owedProceeds[_seller];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x081bc4d1225c6e131da5f6cb81e57f45d3231b2d2b19fddfa1f89ef72c601207\",\"license\":\"MIT\"},\"contracts/abstract/Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"../error/Errors.sol\\\";\\r\\n\\r\\n/// @title Base\\r\\n/// @author @C-Mierez\\r\\n/// @notice Base contract that defines commonly used modifiers for other contracts\\r\\n/// to inherit.\\r\\nabstract contract Base {\\r\\n    /* -------------------------------- Modifiers ------------------------------- */\\r\\n    modifier checkNonZeroAddress(address addr) {\\r\\n        if (addr == address(0)) revert ZeroAddress();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier checkNonZeroValue(uint256 value) {\\r\\n        if (value == 0) revert ZeroValue();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier checkExpectedCaller(address caller, address expected) {\\r\\n        if (caller != expected) revert UnexpectedCaller(caller, expected);\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x08ac589709411aa735c700ba76b7f17bf0c82adeaebf735b9553b8cde95f3a4d\",\"license\":\"MIT\"},\"contracts/error/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/* -------------------------- Global Custom Errors -------------------------- */\\r\\n\\r\\n/// @notice Emitted when the submitted address is the zero address\\r\\nerror ZeroAddress();\\r\\n\\r\\n/// @notice Emitted when the submitted value is zero.\\r\\nerror ZeroValue();\\r\\n\\r\\n/// @notice Emitted when the submitted value is zero or less\\r\\n/// @dev Technically uint can't be negative, so it wouldn't make\\r\\n/// sense for this error to happen when [value] is an uint.\\r\\n/// Hence I'm defining it as an int256 instead.\\r\\nerror ZeroOrNegativeValue(int256 value);\\r\\n\\r\\n/// @notice Emitted when the caller is not the expected address\\r\\nerror UnexpectedCaller(address caller, address expected);\\r\\n\\r\\n/// @notice Emitted when the caller does not have the required permissions\\r\\nerror UnauthorizedCaller(address caller);\\r\\n\\r\\n/// @notice Emitted when the address does not have enough balance\\r\\nerror NotEnoughBalance();\\r\\n\\r\\nerror TransferFailed();\\r\\n\\r\\n/* ---------------------------- ERC Token Errors ---------------------------- */\\r\\n\\r\\n/// @notice Emitted when an ERC20 transfer fails. Catching boolean return from\\r\\n/// the transfer methods.\\r\\n/// @dev I believe it makes sense to return all the information below, since this\\r\\n/// error just catches any kind of failure. It'd likely be useful to have this\\r\\n/// information to understand what exactly went wrong.\\r\\nerror ERC20TransferFailed(address from, address to, uint256 amount);\\r\\n\",\"keccak256\":\"0x752ddb5ee6dbacf7723b5434d17eef56434e56990e56d5e5366fa3bcb868a925\",\"license\":\"MIT\"},\"contracts/interfaces/IMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\r\\n\\r\\ninterface IMarket {\\r\\n    struct Listing {\\r\\n        address owner;\\r\\n        uint256 price;\\r\\n    }\\r\\n\\r\\n    /* --------------------------------- Errors --------------------------------- */\\r\\n    error NotApproved(address nft, uint256 tokenId);\\r\\n\\r\\n    error NotListed(address nft, uint256 tokenId);\\r\\n\\r\\n    error AlreadyListed(address nft, uint256 tokenId);\\r\\n\\r\\n    error NotOwner(address nft, uint256 tokenId);\\r\\n\\r\\n    error InvalidAmountPayed(uint256 price);\\r\\n\\r\\n    error NoProceedsToClaim();\\r\\n\\r\\n    error NotEnoughContractBalance();\\r\\n\\r\\n    /* --------------------------------- Events --------------------------------- */\\r\\n\\r\\n    event ListedItem(\\r\\n        address indexed owner,\\r\\n        IERC721 indexed nft,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 price\\r\\n    );\\r\\n\\r\\n    event BoughtItem(\\r\\n        address indexed buyer,\\r\\n        address seller,\\r\\n        IERC721 indexed nft,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 price\\r\\n    );\\r\\n\\r\\n    event WithdrawnItem(IERC721 indexed nft, uint256 indexed tokenId);\\r\\n\\r\\n    event UpdatedItem(\\r\\n        address indexed owner,\\r\\n        IERC721 indexed nft,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 newPrice\\r\\n    );\\r\\n\\r\\n    event ClaimedProceeds(address indexed owner, uint256 indexed amount);\\r\\n\\r\\n    /* -------------------------------- Functions ------------------------------- */\\r\\n\\r\\n    /// @notice Lists an item on the marketplace.\\r\\n    /// @dev The submitted NFT is approved for the contract to transfer it when the listing is confirmed.\\r\\n    /// @param nft Address of the NFT contract.\\r\\n    /// @param tokenId NFT token ID.\\r\\n    /// @param price Price of the item.\\r\\n    function listItem(\\r\\n        IERC721 nft,\\r\\n        uint256 tokenId,\\r\\n        uint256 price\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Buys a listed item on the marketplace.\\r\\n    /// @dev The buyer is charged the price of the item.\\r\\n    /// @param nft Address of the NFT contract.\\r\\n    /// @param tokenId NFT token ID.\\r\\n    function buyItem(IERC721 nft, uint256 tokenId) external payable;\\r\\n\\r\\n    /// @notice Cancels a listing on the marketplace.\\r\\n    /// @param nft Address of the NFT contract.\\r\\n    /// @param tokenId NFT token ID.\\r\\n    function withdrawItem(IERC721 nft, uint256 tokenId) external;\\r\\n\\r\\n    //7 @notice Updates the price of a listing on the marketplace.\\r\\n    /// @param nft Address of the NFT contract.\\r\\n    /// @param tokenId NFT token ID.\\r\\n    /// @param newPrice New price of the item.\\r\\n    function updateItem(\\r\\n        IERC721 nft,\\r\\n        uint256 tokenId,\\r\\n        uint256 newPrice\\r\\n    ) external;\\r\\n\\r\\n    function claimProceeds() external;\\r\\n\\r\\n    /* ---------------------------------- View ---------------------------------- */\\r\\n    function getListing(IERC721 _nft, uint256 _tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (Listing memory);\\r\\n\\r\\n    function getOwedProceeds(address seller) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x5c1f4824aed95e7c9bcc2084e21f8ee684963abdca1d3d5d259cb89aad432bfe\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "buyItem(address,uint256)": {
        "details": "The buyer is charged the price of the item.",
        "params": {
          "nft": "Address of the NFT contract.",
          "tokenId": "NFT token ID."
        }
      },
      "listItem(address,uint256,uint256)": {
        "details": "The submitted NFT is approved for the contract to transfer it when the listing is confirmed.",
        "params": {
          "nft": "Address of the NFT contract.",
          "price": "Price of the item.",
          "tokenId": "NFT token ID."
        }
      },
      "updateItem(address,uint256,uint256)": {
        "params": {
          "newPrice": "New price of the item.",
          "nft": "Address of the NFT contract.",
          "tokenId": "NFT token ID."
        }
      },
      "withdrawItem(address,uint256)": {
        "params": {
          "nft": "Address of the NFT contract.",
          "tokenId": "NFT token ID."
        }
      }
    },
    "stateVariables": {
      "s_listings": {
        "details": "Listing information for each nft token NFT Address -> TokenId -> Listing"
      },
      "s_owedProceeds": {
        "details": "Store the cumulative amount of ETH owed to each seller Seller Address -> Amount of ETH owed"
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "NotEnoughBalance()": [
        {
          "notice": "Emitted when the address does not have enough balance"
        }
      ],
      "ZeroAddress()": [
        {
          "notice": "Emitted when the submitted address is the zero address"
        }
      ],
      "ZeroValue()": [
        {
          "notice": "Emitted when the submitted value is zero."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "buyItem(address,uint256)": {
        "notice": "Buys a listed item on the marketplace."
      },
      "listItem(address,uint256,uint256)": {
        "notice": "Lists an item on the marketplace."
      },
      "withdrawItem(address,uint256)": {
        "notice": "Cancels a listing on the marketplace."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13,
        "contract": "contracts/Market.sol:Market",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2335,
        "contract": "contracts/Market.sol:Market",
        "label": "s_listings",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_contract(IERC721)1713,t_mapping(t_uint256,t_struct(Listing)2862_storage))"
      },
      {
        "astId": 2340,
        "contract": "contracts/Market.sol:Market",
        "label": "s_owedProceeds",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC721)1713": {
        "encoding": "inplace",
        "label": "contract IERC721",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC721)1713,t_mapping(t_uint256,t_struct(Listing)2862_storage))": {
        "encoding": "mapping",
        "key": "t_contract(IERC721)1713",
        "label": "mapping(contract IERC721 => mapping(uint256 => struct IMarket.Listing))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Listing)2862_storage)"
      },
      "t_mapping(t_uint256,t_struct(Listing)2862_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IMarket.Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)2862_storage"
      },
      "t_struct(Listing)2862_storage": {
        "encoding": "inplace",
        "label": "struct IMarket.Listing",
        "members": [
          {
            "astId": 2859,
            "contract": "contracts/Market.sol:Market",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2861,
            "contract": "contracts/Market.sol:Market",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}