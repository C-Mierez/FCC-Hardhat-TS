/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  UselessBank,
  UselessBankInterface,
} from "../../contracts/UselessBank";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "NotEnoughBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
    ],
    name: "UnauthorizedToken",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        internalType: "address",
        name: "expected",
        type: "address",
      },
    ],
    name: "UnexpectedCaller",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroValue",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Deposited",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "allow",
        type: "bool",
      },
    ],
    name: "TokenUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdrawn",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_token",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_allow",
        type: "bool",
      },
    ],
    name: "authorizeToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "getBalanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getOwner",
    outputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_token",
        type: "address",
      },
    ],
    name: "isAuthorized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040523480156200001157600080fd5b50604051620020e5380380620020e583398181016040528101906200003791906200038f565b806200006c7fd5fcbf06091069627b5816f1d616a57483aca929db68ebb4c4207627c911f9e260001b6200037260201b60201c565b620000a07f5533e574a1627483e8ee3207b42794a5eec6323e2b98ee61cbcbe0ca19f7e37c60001b6200037260201b60201c565b620000d47f4b75da46eb60d6069b33d5050d81b8cd00582d89cda758c4fae9ae4e6eecf08d60001b6200037260201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562000170576200013e7f3600b71758b2cefaf03a36993bfe5a29364d31e992860dcba7900f4218d7468d60001b6200037260201b60201c565b6040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b620001a47f641720a027f3852c256b293645a043cf79f853c4c33e12d00c87ce6cb800f4e460001b6200037260201b60201c565b620001d87f312237553a309045f69cc0cebce82d09d47cbd3ba92b70771e29a4dd5e336b1b60001b6200037260201b60201c565b6200020c7f5c6b5ad57edb647c68406bac1819cdb97d287883b1d9509315be338fb76029cf60001b6200037560201b60201c565b620002407fb088e13814e0fd279cf16eb60532e9d42e32e9e575e1317ddf5a8b996dcfc92e60001b6200037560201b60201c565b620002747f665bb703e65af67e5337d9e5f7d06cb36387b5c71fa706412f220ba6e30b22e160001b6200037560201b60201c565b60018060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620002ff7f1727ae8203a8b0b56ec946f64d02de1c768bf556fa9035578cb1c071e833366760001b6200037560201b60201c565b620003337f085657095007844eb8f2e38d5d4f6504e6018bc839d40e7d7fe4d4444fcd343860001b6200037560201b60201c565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050505062000428565b50565b50565b60008151905062000389816200040e565b92915050565b600060208284031215620003a857620003a762000409565b5b6000620003b88482850162000378565b91505092915050565b6000620003ce82620003e9565b9050919050565b6000620003e282620003c1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200041981620003d5565b81146200042557600080fd5b50565b60805160601c611c976200044e60003960008181610a990152610e2d0152611c976000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806347e7ef241461006757806353290b44146100835780636561cc32146100b3578063893d20e8146100cf578063f3fef3a3146100ed578063fe9fbb8014610109575b600080fd5b610081600480360381019061007c91906118e6565b610139565b005b61009d60048036038101906100989190611866565b61081c565b6040516100aa9190611a9c565b60405180910390f35b6100cd60048036038101906100c891906118a6565b610926565b005b6100d7610da5565b6040516100e49190611962565b60405180910390f35b610107600480360381019061010291906118e6565b610e51565b005b610123600480360381019061011e9190611839565b6116c3565b6040516101309190611a3d565b60405180910390f35b816101667fd5fcbf06091069627b5816f1d616a57483aca929db68ebb4c4207627c911f9e260001b61179d565b6101927f5533e574a1627483e8ee3207b42794a5eec6323e2b98ee61cbcbe0ca19f7e37c60001b61179d565b6101be7f4b75da46eb60d6069b33d5050d81b8cd00582d89cda758c4fae9ae4e6eecf08d60001b61179d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156102515761021f7f3600b71758b2cefaf03a36993bfe5a29364d31e992860dcba7900f4218d7468d60001b61179d565b6040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61027d7f641720a027f3852c256b293645a043cf79f853c4c33e12d00c87ce6cb800f4e460001b61179d565b6102a97f312237553a309045f69cc0cebce82d09d47cbd3ba92b70771e29a4dd5e336b1b60001b61179d565b816102d67ff2834e284fbb84a5080b60a1d8a47f53283576275dce3edd02ade4282c66e2d660001b61179d565b6103027fef349ddbd881646e3fea31e0843120764ef69c2e33f5d0684f7164ce7ab2920560001b61179d565b61032e7f483e55e2ce169b8be36904d68d8957a5b7808a1b054c1f08976af0d414c5a12460001b61179d565b6000811415610395576103637f3af60e18f4ed22544abbd6d0c7f03462413b96e91a91dbefb684d926f459c08660001b61179d565b6040517f7c946ed700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103c17f97ac9ddb099d8cb818e29779425884ed4a4412636dfe766e0b456a2f0e01684c60001b61179d565b6103ed7feb0ea1ce53d4d9195b26a44657b107771cd97a4f0c19c119e34dcecdefa8b7d760001b61179d565b8361041a7fcaf373972f79e1f48050ab8dff9331cf8986c126a6dc8f37b57be1102e016c2d60001b6117a0565b6104467fbda7dde7d8613c7bb0e842d090a7143bcfaf3cfec108350f2a3f7ec68cbfc38360001b6117a0565b6104727f9a1b91318a7b88edb113f3e6d1dd88afd3589bcf392faefb8262c5c1a91e027360001b6117a0565b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661052c576104ef7f15b092a87b71fabafac27ba474e0f42aff1ab5e6d5bc21255401d4ad11e8f2d660001b6117a0565b806040517fe3d87c620000000000000000000000000000000000000000000000000000000081526004016105239190611a58565b60405180910390fd5b6105587f12e08014099bb02f083f91cbb9d2769d6a2e2440de683e3ccd034926342266d560001b6117a0565b6105847f7a23921f37440cd1e98e31ae6e6ed6bed39b68a7ae0c37eca3cfbc4fce7bed8260001b6117a0565b6105b07f18a87c02639a8dae2fc95bf1c7bb965c7c75f9ec8a680311d4deb6088ec9403360001b6117a0565b6105dc7f505480d8d27c94aae39ae9d0e9729b0ae3c5007904895d9dd14fa0bde661235d60001b6117a0565b6106087fb49bd9f3fa167cd27d2ddad481a4943bc6567d1436f68838f46a6354eafcce9b60001b6117a0565b836000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106939190611ab7565b925050819055506106c67ff687253df6a7e0f29133dac331ff08758fa9e20cf6a58a809cd008308131540a60001b6117a0565b6106f27f11ecc1f165a4d289876bc689cc8b7311067a8cc374ae6ad40057a8c53e96f99860001b6117a0565b7f8752a472e571a816aea92eec8dae9baf628e840f4929fbcc2d155e6233ff68a7338686604051610725939291906119dd565b60405180910390a16107597faf19314cab8e05ac29e483b0be70b1e5af4438b8f156b7a41a83777e4aad520360001b6117a0565b6107857f6d0a446dd4e4c73a6a614e5cd5b3e0e3231ab56e35ee90f111bf986276ac39a260001b6117a0565b8473ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b81526004016107c2939291906119a6565b602060405180830381600087803b1580156107dc57600080fd5b505af11580156107f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610814919061180c565b505050505050565b600061084a7f699dfa34369ffe3c4fd397a800942564d28c0e5a0c944963533adc714c5a721e60001b6117a0565b6108767fa92d86b226267130241817aff29376e75470c6433d7dbf78553ae900a371fcab60001b6117a0565b6108a27f4d15e2ad259693557cfb9656329dac474ac895f58b5852cd319f2297ea33609d60001b6117a0565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b816109537fd5fcbf06091069627b5816f1d616a57483aca929db68ebb4c4207627c911f9e260001b61179d565b61097f7f5533e574a1627483e8ee3207b42794a5eec6323e2b98ee61cbcbe0ca19f7e37c60001b61179d565b6109ab7f4b75da46eb60d6069b33d5050d81b8cd00582d89cda758c4fae9ae4e6eecf08d60001b61179d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a3e57610a0c7f3600b71758b2cefaf03a36993bfe5a29364d31e992860dcba7900f4218d7468d60001b61179d565b6040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a6a7f641720a027f3852c256b293645a043cf79f853c4c33e12d00c87ce6cb800f4e460001b61179d565b610a967f312237553a309045f69cc0cebce82d09d47cbd3ba92b70771e29a4dd5e336b1b60001b61179d565b337f0000000000000000000000000000000000000000000000000000000000000000610ae47fd9c242bf358583dbb89cc8a37114bbaa476cc8e31a94fa603252a5c82d41797560001b61179d565b610b107f2e7dd5089d762971a3087ab1e927fed94c72cbe6d59f579b57dcdf9b0b664e2660001b61179d565b610b3c7fa9573856c9450d199f0dbbebe1850174a8c8089d7894618807aadbac1aa3141760001b61179d565b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610bda57610b9b7f55b5dc6d0c54a3af943bbffc80d8790c78b31c8778a4baf527aa26514d84e64460001b61179d565b81816040517fd8a510f2000000000000000000000000000000000000000000000000000000008152600401610bd192919061197d565b60405180910390fd5b610c067fd218e89e36e024c8d30af339deedbd5c8b7c019930ab141c4a4415da949bbb7c60001b61179d565b610c327f19a89c9bb8cc986d993bd14077c0f287ea4545e0cf43f4d7a661eccf79e545ec60001b61179d565b610c5e7f6b7b57a18b530cbffd1e2a540f5a6f3d6af5cb99f352ee0a728aca125cd4899960001b6117a0565b610c8a7f76f11787f4f77c7d9917088dbd59e441954f7117417b399720350e2f2c13bbc360001b6117a0565b610cb67f9a6b78411e75171f6f9e740f8d86558b6ae8a129266c7c8eacb4c83851cd9c8760001b6117a0565b83600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610d397f4920ba8f495e380784693848ace9415ae9f37259a2f3b416335749b6983ff69760001b6117a0565b610d657f041e5a04046d7c3dff333229800aa9175b68d2ab9c6c18f9fde5e1c516322dc760001b6117a0565b7fdcb2804db02b95bdd568fd11a31c5577ffdf36538c0f670e92930d9c1e8518ab8585604051610d96929190611a73565b60405180910390a15050505050565b6000610dd37f59da17fcf872e9b2d8a7d22b2b0e98e01254e903679677cbf8b4ae86d2252c4c60001b6117a0565b610dff7f083d6359f156d5b0358111d4cecf51d7b8c7da1fbbeaa7cf0cb6c8217b8bdc0c60001b6117a0565b610e2b7f959c8f850d64765b6b4b66cd448bc8fc4fb0361cf736b4df0388d00ac89f481860001b6117a0565b7f0000000000000000000000000000000000000000000000000000000000000000905090565b81610e7e7fd5fcbf06091069627b5816f1d616a57483aca929db68ebb4c4207627c911f9e260001b61179d565b610eaa7f5533e574a1627483e8ee3207b42794a5eec6323e2b98ee61cbcbe0ca19f7e37c60001b61179d565b610ed67f4b75da46eb60d6069b33d5050d81b8cd00582d89cda758c4fae9ae4e6eecf08d60001b61179d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f6957610f377f3600b71758b2cefaf03a36993bfe5a29364d31e992860dcba7900f4218d7468d60001b61179d565b6040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610f957f641720a027f3852c256b293645a043cf79f853c4c33e12d00c87ce6cb800f4e460001b61179d565b610fc17f312237553a309045f69cc0cebce82d09d47cbd3ba92b70771e29a4dd5e336b1b60001b61179d565b81610fee7ff2834e284fbb84a5080b60a1d8a47f53283576275dce3edd02ade4282c66e2d660001b61179d565b61101a7fef349ddbd881646e3fea31e0843120764ef69c2e33f5d0684f7164ce7ab2920560001b61179d565b6110467f483e55e2ce169b8be36904d68d8957a5b7808a1b054c1f08976af0d414c5a12460001b61179d565b60008114156110ad5761107b7f3af60e18f4ed22544abbd6d0c7f03462413b96e91a91dbefb684d926f459c08660001b61179d565b6040517f7c946ed700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6110d97f97ac9ddb099d8cb818e29779425884ed4a4412636dfe766e0b456a2f0e01684c60001b61179d565b6111057feb0ea1ce53d4d9195b26a44657b107771cd97a4f0c19c119e34dcecdefa8b7d760001b61179d565b836111327fcaf373972f79e1f48050ab8dff9331cf8986c126a6dc8f37b57be1102e016c2d60001b6117a0565b61115e7fbda7dde7d8613c7bb0e842d090a7143bcfaf3cfec108350f2a3f7ec68cbfc38360001b6117a0565b61118a7f9a1b91318a7b88edb113f3e6d1dd88afd3589bcf392faefb8262c5c1a91e027360001b6117a0565b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611244576112077f15b092a87b71fabafac27ba474e0f42aff1ab5e6d5bc21255401d4ad11e8f2d660001b6117a0565b806040517fe3d87c6200000000000000000000000000000000000000000000000000000000815260040161123b9190611a58565b60405180910390fd5b6112707f12e08014099bb02f083f91cbb9d2769d6a2e2440de683e3ccd034926342266d560001b6117a0565b61129c7f7a23921f37440cd1e98e31ae6e6ed6bed39b68a7ae0c37eca3cfbc4fce7bed8260001b6117a0565b6112c87fb8d24514bdffc54f7dbd363f746043b300fd7360bc68b206755d49623621fe8160001b6117a0565b6112f47ffe5bfc9c3d46b121bf76a500d96b19e03e6c71696f80865148b05821445f3da160001b6117a0565b6113207f1bcd018945d618c56afc3a35fa0cdd3ac57c98e93502640afc3f374c604e61bc60001b6117a0565b836000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561142d576113cf7f9bf1c9e872fce6e2d9548e015d3266340a850f5cfcd4f754b1121a2ee485ebc460001b6117a0565b6113fb7ffb383487dbf4d3678a036a446240b216f5b50462ec3138817911e0858d355c1b60001b6117a0565b6040517fad3a8b9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6114597f7f48f097e5827405110a544c1f3565fc29268e3dedfa65597c244707f1b0c4e960001b6117a0565b6114857f9bfbfb41c6ecb6f9c190f25e6067823626b236e828d1416cdf92c1cf233d0f3660001b6117a0565b6114b17f5f36744c24fd0dc8b6f8e0d77ad875c8edc723fb6cd48f566618615c400bf7b160001b6117a0565b836000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461153c9190611b0d565b9250508190555061156f7f243d592571ea1de8acf2d45cc85d78e62fcc2c012805a439fb3afd839dfee49660001b6117a0565b61159b7fb3eae488ba70b228b58d5fe57e677607158214a11b6257cbf16b532f9f0f8f4660001b6117a0565b7fd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb3386866040516115ce939291906119dd565b60405180910390a16116027f89786666b772f51cc62792134d3f32f04836c884a111058180d6809cc5f0cd5760001b6117a0565b61162e7fc7d44f269ddc4bb6872a497a1ed775a17de83c2503eafdddb03a810a01f5318060001b6117a0565b8473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff1660e01b8152600401611669929190611a14565b602060405180830381600087803b15801561168357600080fd5b505af1158015611697573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116bb919061180c565b505050505050565b60006116f17ffbee2e2156f711e08c7baf2c0ec46e73252c541341aa053b78a647ec9537bf3760001b6117a0565b61171d7fdf74ad0aea1ea42f2d2380eba7ca08bb06e06d74ff2b8a98f64016f550478a5360001b6117a0565b6117497f510b6d49d0425b02675f9833528442da67a6f7de8ec33e8ba2df809e78458a4060001b6117a0565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b50565b50565b6000813590506117b281611c05565b92915050565b6000813590506117c781611c1c565b92915050565b6000815190506117dc81611c1c565b92915050565b6000813590506117f181611c33565b92915050565b60008135905061180681611c4a565b92915050565b60006020828403121561182257611821611c00565b5b6000611830848285016117cd565b91505092915050565b60006020828403121561184f5761184e611c00565b5b600061185d848285016117e2565b91505092915050565b6000806040838503121561187d5761187c611c00565b5b600061188b858286016117e2565b925050602061189c858286016117a3565b9150509250929050565b600080604083850312156118bd576118bc611c00565b5b60006118cb858286016117e2565b92505060206118dc858286016117b8565b9150509250929050565b600080604083850312156118fd576118fc611c00565b5b600061190b858286016117e2565b925050602061191c858286016117f7565b9150509250929050565b61192f81611b41565b82525050565b61193e81611b53565b82525050565b61194d81611b9b565b82525050565b61195c81611b91565b82525050565b60006020820190506119776000830184611926565b92915050565b60006040820190506119926000830185611926565b61199f6020830184611926565b9392505050565b60006060820190506119bb6000830186611926565b6119c86020830185611926565b6119d56040830184611953565b949350505050565b60006060820190506119f26000830186611926565b6119ff6020830185611944565b611a0c6040830184611953565b949350505050565b6000604082019050611a296000830185611926565b611a366020830184611953565b9392505050565b6000602082019050611a526000830184611935565b92915050565b6000602082019050611a6d6000830184611944565b92915050565b6000604082019050611a886000830185611944565b611a956020830184611935565b9392505050565b6000602082019050611ab16000830184611953565b92915050565b6000611ac282611b91565b9150611acd83611b91565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611b0257611b01611bd1565b5b828201905092915050565b6000611b1882611b91565b9150611b2383611b91565b925082821015611b3657611b35611bd1565b5b828203905092915050565b6000611b4c82611b71565b9050919050565b60008115159050919050565b6000611b6a82611b41565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611ba682611bad565b9050919050565b6000611bb882611bbf565b9050919050565b6000611bca82611b71565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b611c0e81611b41565b8114611c1957600080fd5b50565b611c2581611b53565b8114611c3057600080fd5b50565b611c3c81611b5f565b8114611c4757600080fd5b50565b611c5381611b91565b8114611c5e57600080fd5b5056fea2646970667358221220d33e49c1afdbca412edd42aee0967b733fcfe0fa630e0dd9cb68b7f653a136e664736f6c63430008070033";

type UselessBankConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UselessBankConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UselessBank__factory extends ContractFactory {
  constructor(...args: UselessBankConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<UselessBank> {
    return super.deploy(_token, overrides || {}) as Promise<UselessBank>;
  }
  override getDeployTransaction(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_token, overrides || {});
  }
  override attach(address: string): UselessBank {
    return super.attach(address) as UselessBank;
  }
  override connect(signer: Signer): UselessBank__factory {
    return super.connect(signer) as UselessBank__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UselessBankInterface {
    return new utils.Interface(_abi) as UselessBankInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UselessBank {
    return new Contract(address, _abi, signerOrProvider) as UselessBank;
  }
}
