/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestToken,
  TestTokenInterface,
} from "../../../contracts/test/TestToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "faucet",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001855380380620018558339818101604052810190620000379190620001a7565b8181818181600390805190602001906200005392919062000079565b5080600490805190602001906200006c92919062000079565b50505050505050620003b0565b8280546200008790620002c1565b90600052602060002090601f016020900481019282620000ab5760008555620000f7565b82601f10620000c657805160ff1916838001178555620000f7565b82800160010185558215620000f7579182015b82811115620000f6578251825591602001919060010190620000d9565b5b5090506200010691906200010a565b5090565b5b80821115620001255760008160009055506001016200010b565b5090565b6000620001406200013a8462000255565b6200022c565b9050828152602081018484840111156200015f576200015e62000390565b5b6200016c8482856200028b565b509392505050565b600082601f8301126200018c576200018b6200038b565b5b81516200019e84826020860162000129565b91505092915050565b60008060408385031215620001c157620001c06200039a565b5b600083015167ffffffffffffffff811115620001e257620001e162000395565b5b620001f08582860162000174565b925050602083015167ffffffffffffffff81111562000214576200021362000395565b5b620002228582860162000174565b9150509250929050565b6000620002386200024b565b9050620002468282620002f7565b919050565b6000604051905090565b600067ffffffffffffffff8211156200027357620002726200035c565b5b6200027e826200039f565b9050602081019050919050565b60005b83811015620002ab5780820151818401526020810190506200028e565b83811115620002bb576000848401525b50505050565b60006002820490506001821680620002da57607f821691505b60208210811415620002f157620002f06200032d565b5b50919050565b62000302826200039f565b810181811067ffffffffffffffff821117156200032457620003236200035c565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61149580620003c06000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063579158971161007157806357915897146101a357806370a08231146101bf57806395d89b41146101ef578063a457c2d71461020d578063a9059cbb1461023d578063dd62ed3e1461026d576100b4565b806306fdde03146100b9578063095ea7b3146100d757806318160ddd1461010757806323b872dd14610125578063313ce567146101555780633950935114610173575b600080fd5b6100c161029d565b6040516100ce9190610f0d565b60405180910390f35b6100f160048036038101906100ec9190610d07565b61032f565b6040516100fe9190610ef2565b60405180910390f35b61010f610352565b60405161011c919061102f565b60405180910390f35b61013f600480360381019061013a9190610cb4565b61035c565b60405161014c9190610ef2565b60405180910390f35b61015d61038b565b60405161016a919061104a565b60405180910390f35b61018d60048036038101906101889190610d07565b610394565b60405161019a9190610ef2565b60405180910390f35b6101bd60048036038101906101b89190610d47565b6103cb565b005b6101d960048036038101906101d49190610c47565b6103d8565b6040516101e6919061102f565b60405180910390f35b6101f7610420565b6040516102049190610f0d565b60405180910390f35b61022760048036038101906102229190610d07565b6104b2565b6040516102349190610ef2565b60405180910390f35b61025760048036038101906102529190610d07565b610529565b6040516102649190610ef2565b60405180910390f35b61028760048036038101906102829190610c74565b61054c565b604051610294919061102f565b60405180910390f35b6060600380546102ac9061115f565b80601f01602080910402602001604051908101604052809291908181526020018280546102d89061115f565b80156103255780601f106102fa57610100808354040283529160200191610325565b820191906000526020600020905b81548152906001019060200180831161030857829003601f168201915b5050505050905090565b60008061033a6105d3565b90506103478185856105db565b600191505092915050565b6000600254905090565b6000806103676105d3565b90506103748582856107a6565b61037f858585610832565b60019150509392505050565b60006012905090565b60008061039f6105d3565b90506103c08185856103b1858961054c565b6103bb9190611081565b6105db565b600191505092915050565b6103d53382610ab3565b50565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606004805461042f9061115f565b80601f016020809104026020016040519081016040528092919081815260200182805461045b9061115f565b80156104a85780601f1061047d576101008083540402835291602001916104a8565b820191906000526020600020905b81548152906001019060200180831161048b57829003601f168201915b5050505050905090565b6000806104bd6105d3565b905060006104cb828661054c565b905083811015610510576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050790610fef565b60405180910390fd5b61051d82868684036105db565b60019250505092915050565b6000806105346105d3565b9050610541818585610832565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561064b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064290610fcf565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156106bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b290610f4f565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610799919061102f565b60405180910390a3505050565b60006107b2848461054c565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461082c578181101561081e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081590610f6f565b60405180910390fd5b61082b84848484036105db565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156108a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089990610faf565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610912576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090990610f2f565b60405180910390fd5b61091d838383610c13565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156109a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099a90610f8f565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a369190611081565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a9a919061102f565b60405180910390a3610aad848484610c18565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610b23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1a9061100f565b60405180910390fd5b610b2f60008383610c13565b8060026000828254610b419190611081565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b969190611081565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610bfb919061102f565b60405180910390a3610c0f60008383610c18565b5050565b505050565b505050565b600081359050610c2c81611431565b92915050565b600081359050610c4181611448565b92915050565b600060208284031215610c5d57610c5c6111ef565b5b6000610c6b84828501610c1d565b91505092915050565b60008060408385031215610c8b57610c8a6111ef565b5b6000610c9985828601610c1d565b9250506020610caa85828601610c1d565b9150509250929050565b600080600060608486031215610ccd57610ccc6111ef565b5b6000610cdb86828701610c1d565b9350506020610cec86828701610c1d565b9250506040610cfd86828701610c32565b9150509250925092565b60008060408385031215610d1e57610d1d6111ef565b5b6000610d2c85828601610c1d565b9250506020610d3d85828601610c32565b9150509250929050565b600060208284031215610d5d57610d5c6111ef565b5b6000610d6b84828501610c32565b91505092915050565b610d7d816110e9565b82525050565b6000610d8e82611065565b610d988185611070565b9350610da881856020860161112c565b610db1816111f4565b840191505092915050565b6000610dc9602383611070565b9150610dd482611205565b604082019050919050565b6000610dec602283611070565b9150610df782611254565b604082019050919050565b6000610e0f601d83611070565b9150610e1a826112a3565b602082019050919050565b6000610e32602683611070565b9150610e3d826112cc565b604082019050919050565b6000610e55602583611070565b9150610e608261131b565b604082019050919050565b6000610e78602483611070565b9150610e838261136a565b604082019050919050565b6000610e9b602583611070565b9150610ea6826113b9565b604082019050919050565b6000610ebe601f83611070565b9150610ec982611408565b602082019050919050565b610edd81611115565b82525050565b610eec8161111f565b82525050565b6000602082019050610f076000830184610d74565b92915050565b60006020820190508181036000830152610f278184610d83565b905092915050565b60006020820190508181036000830152610f4881610dbc565b9050919050565b60006020820190508181036000830152610f6881610ddf565b9050919050565b60006020820190508181036000830152610f8881610e02565b9050919050565b60006020820190508181036000830152610fa881610e25565b9050919050565b60006020820190508181036000830152610fc881610e48565b9050919050565b60006020820190508181036000830152610fe881610e6b565b9050919050565b6000602082019050818103600083015261100881610e8e565b9050919050565b6000602082019050818103600083015261102881610eb1565b9050919050565b60006020820190506110446000830184610ed4565b92915050565b600060208201905061105f6000830184610ee3565b92915050565b600081519050919050565b600082825260208201905092915050565b600061108c82611115565b915061109783611115565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156110cc576110cb611191565b5b828201905092915050565b60006110e2826110f5565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b8381101561114a57808201518184015260208101905061112f565b83811115611159576000848401525b50505050565b6000600282049050600182168061117757607f821691505b6020821081141561118b5761118a6111c0565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b61143a816110d7565b811461144557600080fd5b50565b61145181611115565b811461145c57600080fd5b5056fea26469706673582212203e3044dba751b98cb73fb78e30ff208e4e2cc4068e5d41449f7864fc71ef894a64736f6c63430008070033";

type TestTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestToken__factory extends ContractFactory {
  constructor(...args: TestTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _name: string,
    _symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestToken> {
    return super.deploy(_name, _symbol, overrides || {}) as Promise<TestToken>;
  }
  override getDeployTransaction(
    _name: string,
    _symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_name, _symbol, overrides || {});
  }
  override attach(address: string): TestToken {
    return super.attach(address) as TestToken;
  }
  override connect(signer: Signer): TestToken__factory {
    return super.connect(signer) as TestToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestTokenInterface {
    return new utils.Interface(_abi) as TestTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestToken {
    return new Contract(address, _abi, signerOrProvider) as TestToken;
  }
}
