/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace IMarket {
  export type ListingStruct = { owner: string; price: BigNumberish };

  export type ListingStructOutput = [string, BigNumber] & {
    owner: string;
    price: BigNumber;
  };
}

export interface IMarketInterface extends utils.Interface {
  functions: {
    "buyItem(address,uint256)": FunctionFragment;
    "claimProceeds()": FunctionFragment;
    "getListing(address,uint256)": FunctionFragment;
    "getOwedProceeds(address)": FunctionFragment;
    "listItem(address,uint256,uint256)": FunctionFragment;
    "updateItem(address,uint256,uint256)": FunctionFragment;
    "withdrawItem(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buyItem"
      | "claimProceeds"
      | "getListing"
      | "getOwedProceeds"
      | "listItem"
      | "updateItem"
      | "withdrawItem"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buyItem",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimProceeds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getListing",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwedProceeds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "listItem",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateItem",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawItem",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "buyItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimProceeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getListing", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOwedProceeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listItem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawItem",
    data: BytesLike
  ): Result;

  events: {
    "BoughtItem(address,address,address,uint256,uint256)": EventFragment;
    "ClaimedProceeds(address,uint256)": EventFragment;
    "ListedItem(address,address,uint256,uint256)": EventFragment;
    "UpdatedItem(address,address,uint256,uint256)": EventFragment;
    "WithdrawnItem(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BoughtItem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimedProceeds"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ListedItem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedItem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnItem"): EventFragment;
}

export interface BoughtItemEventObject {
  buyer: string;
  seller: string;
  nft: string;
  tokenId: BigNumber;
  price: BigNumber;
}
export type BoughtItemEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  BoughtItemEventObject
>;

export type BoughtItemEventFilter = TypedEventFilter<BoughtItemEvent>;

export interface ClaimedProceedsEventObject {
  owner: string;
  amount: BigNumber;
}
export type ClaimedProceedsEvent = TypedEvent<
  [string, BigNumber],
  ClaimedProceedsEventObject
>;

export type ClaimedProceedsEventFilter = TypedEventFilter<ClaimedProceedsEvent>;

export interface ListedItemEventObject {
  owner: string;
  nft: string;
  tokenId: BigNumber;
  price: BigNumber;
}
export type ListedItemEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  ListedItemEventObject
>;

export type ListedItemEventFilter = TypedEventFilter<ListedItemEvent>;

export interface UpdatedItemEventObject {
  owner: string;
  nft: string;
  tokenId: BigNumber;
  newPrice: BigNumber;
}
export type UpdatedItemEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  UpdatedItemEventObject
>;

export type UpdatedItemEventFilter = TypedEventFilter<UpdatedItemEvent>;

export interface WithdrawnItemEventObject {
  nft: string;
  tokenId: BigNumber;
}
export type WithdrawnItemEvent = TypedEvent<
  [string, BigNumber],
  WithdrawnItemEventObject
>;

export type WithdrawnItemEventFilter = TypedEventFilter<WithdrawnItemEvent>;

export interface IMarket extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMarketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyItem(
      nft: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimProceeds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getListing(
      _nft: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IMarket.ListingStructOutput]>;

    getOwedProceeds(
      seller: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    listItem(
      nft: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateItem(
      nft: string,
      tokenId: BigNumberish,
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawItem(
      nft: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  buyItem(
    nft: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimProceeds(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getListing(
    _nft: string,
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IMarket.ListingStructOutput>;

  getOwedProceeds(
    seller: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  listItem(
    nft: string,
    tokenId: BigNumberish,
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateItem(
    nft: string,
    tokenId: BigNumberish,
    newPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawItem(
    nft: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyItem(
      nft: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimProceeds(overrides?: CallOverrides): Promise<void>;

    getListing(
      _nft: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IMarket.ListingStructOutput>;

    getOwedProceeds(
      seller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listItem(
      nft: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateItem(
      nft: string,
      tokenId: BigNumberish,
      newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawItem(
      nft: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BoughtItem(address,address,address,uint256,uint256)"(
      buyer?: string | null,
      seller?: null,
      nft?: string | null,
      tokenId?: BigNumberish | null,
      price?: null
    ): BoughtItemEventFilter;
    BoughtItem(
      buyer?: string | null,
      seller?: null,
      nft?: string | null,
      tokenId?: BigNumberish | null,
      price?: null
    ): BoughtItemEventFilter;

    "ClaimedProceeds(address,uint256)"(
      owner?: string | null,
      amount?: BigNumberish | null
    ): ClaimedProceedsEventFilter;
    ClaimedProceeds(
      owner?: string | null,
      amount?: BigNumberish | null
    ): ClaimedProceedsEventFilter;

    "ListedItem(address,address,uint256,uint256)"(
      owner?: string | null,
      nft?: string | null,
      tokenId?: BigNumberish | null,
      price?: null
    ): ListedItemEventFilter;
    ListedItem(
      owner?: string | null,
      nft?: string | null,
      tokenId?: BigNumberish | null,
      price?: null
    ): ListedItemEventFilter;

    "UpdatedItem(address,address,uint256,uint256)"(
      owner?: string | null,
      nft?: string | null,
      tokenId?: BigNumberish | null,
      newPrice?: null
    ): UpdatedItemEventFilter;
    UpdatedItem(
      owner?: string | null,
      nft?: string | null,
      tokenId?: BigNumberish | null,
      newPrice?: null
    ): UpdatedItemEventFilter;

    "WithdrawnItem(address,uint256)"(
      nft?: string | null,
      tokenId?: BigNumberish | null
    ): WithdrawnItemEventFilter;
    WithdrawnItem(
      nft?: string | null,
      tokenId?: BigNumberish | null
    ): WithdrawnItemEventFilter;
  };

  estimateGas: {
    buyItem(
      nft: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimProceeds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getListing(
      _nft: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwedProceeds(
      seller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listItem(
      nft: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateItem(
      nft: string,
      tokenId: BigNumberish,
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawItem(
      nft: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyItem(
      nft: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimProceeds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getListing(
      _nft: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwedProceeds(
      seller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listItem(
      nft: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateItem(
      nft: string,
      tokenId: BigNumberish,
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawItem(
      nft: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
